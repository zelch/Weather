#!/usr/bin/perl

use strict;
use warnings;
use QtCore4;
use QtGui4;
use QtCore4::debug qw(ambiguous);
use Data::Dumper;

{
    package Radar;
    use QtCore4;
    use QtCore4::isa qw( Qt::Dialog );
    use Data::Dumper;

    sub NEW {
	my ($class, $parent, $ua) = @_;
	$class->SUPER::NEW($parent);
    }

    sub init {
	my ($ua, $config) = @_;

	this->{ua} = $ua;
	this->{config} = $config;

	my $vbox = Qt::VBoxLayout($_);
	this->{radar} = Qt::Label();
	this->{radar}->setScaledContents(1);
	$vbox->addWidget(this->{radar});
	setLayout($vbox);
    }

    sub update {
	my $icon_req = HTTP::Request->new(GET => this->{config}->{radar_url});
	my $res = this->{ua}->request($icon_req);
	if ($res->is_success) {
	    #this->{radar_image} = Qt::Pixmap;
	    #this->{radar_image}->loadFromData($res->content, length($res->content));
	    #this->{radar}->setPixmap(this->{radar_image});
	    this->{buffer} = Qt::Buffer();
	    this->{buffer}->open(Qt::Buffer::ReadWrite());
	    this->{buffer}->writeData($res->content, length($res->content));
#	    $buffer->setData($res->content, length($res->content));
	    this->{radar_image} = Qt::Movie(this->{buffer});
#	    this->{radar_image}->setCacheMode(1);
	    this->{radar}->setMovie(this->{radar_image});
	    this->{radar_image}->start();
	}
    }
}

{
    package Forecast;
    use QtCore4;
    use QtCore4::isa qw( Qt::Dialog );
    use Data::Dumper;

    sub NEW {
	my ($class, $parent, $ua) = @_;
	$class->SUPER::NEW($parent);
    }

    sub init {
	my ($ua, $config) = @_;

	this->{ua} = $ua;
	this->{config} = $config;

	my $vbox = Qt::VBoxLayout($_);
	this->{text} = Qt::PlainTextEdit();
	this->{text}->setPlainText("");
	this->{text}->setReadOnly(1);
	$vbox->addWidget(this->{text});
	setLayout($vbox);
    }

    sub update {
	this->get_forecast();
    }

    sub get_forecast {
	delete this->{current};

	my $req = HTTP::Request->new(GET => this->{config}->{forecast_url});
	#$req->content_type('application/x-www-form-urlencoded');
	#$req->content('query=libwww-perl&mode=dist');

	# Pass request to the user agent and get a response back
	my $res = this->{ua}->request($req);

	# Check the outcome of the response
	if ($res->is_success) {
	    my $text = $res->content();

	    my @text = split(/\n/, $text);
#	    print Dumper(\@text);
	    $text = "";
	    my $day = undef;
	    for my $line (@text) {
		if ($line =~ /^\.([^.]+)\.\.\.(.*)/) {
		    if (defined($day)) {
			$text .= "\n\n";
		    }

		    $day = $1;
		    $text .= "$day\n";
		    chomp $2;
		    $text .= $2;
		} elsif ($line =~ /^\$\$$/) {
		    last;
		} elsif (defined($day)) {
		    $text .= " $line";
		}
	    }

	    this->{text}->setPlainText($text);
	}
	else {
	    print $res->status_line, "\n";
	}
    }
}

{
    package Conditions;
    use QtCore4;
    use QtCore4::isa qw( Qt::Dialog );
    use LWP::UserAgent;
    use XML::Simple;
    use Data::Dumper;

    sub get_current {
	delete this->{current};

	my $req = HTTP::Request->new(GET => this->{config}->{conditions_url});
	#$req->content_type('application/x-www-form-urlencoded');
	#$req->content('query=libwww-perl&mode=dist');

	# Pass request to the user agent and get a response back
	my $res = this->{ua}->request($req);

	# Check the outcome of the response
	if ($res->is_success) {
	    this->{current} = this->{xs}->XMLin($res->content);

	    my $icon_req = HTTP::Request->new(GET => this->{current}->{icon_url_base} . this->{current}->{icon_url_name});
	    $res = this->{ua}->request($icon_req);
	    if ($res->is_success) {
		this->{current}->{image} = Qt::Pixmap;
		this->{current}->{image}->loadFromData($res->content, length($res->content));
	    }
	}
	else {
	    print $res->status_line, "\n";
	}


    }

    sub update {
	this->get_current();

	my $unit_t = this->{config}->{temp_unit};
	my $unit_w = this->{config}->{wind_unit};
	my $unit_p = this->{config}->{pressure_unit};

	this->{label}->{temp}->setText(this->{current}->{"temp_" . lc($unit_t)} . " " . uc($unit_t));
	if (defined(this->{current}->{"heat_index_" . lc($unit_t)})) {
	    this->{label}->{feels_like}->setText(this->{current}->{"heat_index_" . lc($unit_t)} . " " . uc($unit_t));
	} else {
	    this->{label}->{feels_like}->setText(this->{current}->{"temp_" . lc($unit_t)} . " " . uc($unit_t));
	}
	this->{label}->{weather}->setText(this->{current}->{weather});
	this->{label}->{pressure}->setText(this->{current}->{'pressure_' . lc($unit_p)} . " " . uc($unit_p));
	if (defined(this->{current}->{'wind_gust_' . lc($unit_w)})) {
	    this->{label}->{wind}->setText(this->{current}->{'wind_dir'} . " / " . this->{current}->{'wind_' . lc($unit_w)} . " " . uc($unit_w) . " gusting to " . this->{current}->{'wind_gust_' . lc($unit_w)} . " " . uc($unit_w));
	} else {
	    this->{label}->{wind}->setText(this->{current}->{'wind_dir'} . " / " . this->{current}->{'wind_' . lc($unit_w)} . " " . uc($unit_w));
	}
	this->{label}->{location}->setText(this->{current}->{location});
	this->{label}->{updated}->setText(this->{current}->{observation_time_rfc822});
	this->{label}->{humidity}->setText(this->{current}->{relative_humidity} . ' %');
	this->{label}->{dew_point}->setText(this->{current}->{'dewpoint_' . lc($unit_t)} . " " . uc($unit_t));
	this->{label}->{visibility}->setText(this->{current}->{visibility_mi} . ' miles');
	this->{label}->{image}->setPixmap(this->{current}->{image});
	if (defined(this->{window})) {
	    this->{window}->setWindowTitle(this->{current}->{"temp_" . lc($unit_t)} . " " . uc($unit_t) . " / " . this->{current}->{weather});
	}

    }

    sub set_window {
	my ($window) = @_;
	this->{window} = $window;
    }

    sub NEW {
	my ($class, $parent, $ua) = @_;
	$class->SUPER::NEW($parent);
    }

    sub init {
	my ($ua, $config) = @_;

	this->{ua} = $ua;
	this->{config} = $config;
	this->{xs} = XML::Simple->new();

	my $hbox = Qt::HBoxLayout($_);

	my $form = Qt::FormLayout();
#	$form->addRow(Qt::Label(this->tr('Temperature')), Qt::Label(this->{current}->{"temp_" . lc($unit_t)} . " " . uc($unit_t)));
	#$form->addWidget(Qt::Label(this->tr('Temperature')));
	this->{label}->{temp} = Qt::Label('-');
	this->{label}->{feels_like} = Qt::Label('-');
	this->{label}->{weather} = Qt::Label('-');
	this->{label}->{pressure} = Qt::Label('-');
	this->{label}->{wind} = Qt::Label('-');
	this->{label}->{location} = Qt::Label('-');
	this->{label}->{updated} = Qt::Label('-');
	this->{label}->{humidity} = Qt::Label('-');
	this->{label}->{dew_point} = Qt::Label('-');
	this->{label}->{visibility} = Qt::Label('-');
	this->{label}->{image} = Qt::Label();

	$form->addRow("Location:", this->{label}->{location});
	$form->addRow("Last Updated:", this->{label}->{updated});
	$form->addRow("Conditions:", this->{label}->{weather});
	$form->addRow("Temperature:", this->{label}->{temp});
	$form->addRow("Feels Like:", this->{label}->{feels_like});
	$form->addRow("Dew point:", this->{label}->{dew_point});
	$form->addRow("Relative humidity:", this->{label}->{humidity});
	$form->addRow("Wind:", this->{label}->{wind});
	$form->addRow("Pressure:", this->{label}->{pressure});
	$form->addRow("Visibility:", this->{label}->{visibility});
	#$form->addWidget(Qt::Label(this->tr('Feels LIke')));
	#$form->addWidget(this->{label}->{feels_like});

	$hbox->addLayout($form);

	$hbox->addWidget(this->{label}->{image});
	$hbox->setAlignment(this->{label}->{image}, Qt::AlignRight() | Qt::AlignTop());

	setLayout($hbox);
    }
}

{
    package App;
    use Conditions;
    use Forecast;
    use Radar;
    use LWP::UserAgent;
    use QtCore4;
    use QtCore4::slots button_exit => [], update => [];
    use QtCore4::isa qw( Qt::Application );
    use Data::Dumper;

    my %config = (
#	radar_url => 'http://i.imwx.com//web/radar/us_dfw_ultraradar_plus_usen.jpg',
#	radar_url => 'http://i.imwx.com//web/radar/us_dfw_closeradar_plus_usen.jpg',
#	radar_url => 'http://i.imwx.com/looper/archive/us_dfw_closeradar_plus_usen/1L.jpg',
#	http://i.imwx.com/looper/archive/us_dfw_closeradar_plus_usen/5L.jpg?1368945427177
#	http://i.imwx.com/looper/archive/us_dfw_closeradar_plus_usen/1L.jpg?1368945427177
	radar_url => 'http://belo.bimedia.net/WFAA/weather/animated-loops/ssite/640x480/dma.gif',
	forecast_url => 'http://weather.noaa.gov/pub/data/forecasts/zone/tx/txz119.txt',
	conditions_url => 'http://w1.weather.gov/xml/current_obs/KDFW.xml',
	pressure_unit => 'mb',
	wind_unit => 'mph',
	temp_unit => 'f',
	update_time => 15 * 60000, # Every 15 minutes.
    );

    my ($conditions, $forecast, $radar);

    sub NEW {
	shift->SUPER::NEW(@_);

	my $ua = LWP::UserAgent->new;
	$ua->agent("weather/0.00");

	$conditions = Conditions();
	$conditions->init($ua, \%config);

	$forecast = Forecast();
	$forecast->init($ua, \%config);

	$radar = Radar();
	$radar->init($ua, \%config);

	my $window = Qt::Dialog();
	my $layout = Qt::GridLayout();

	my $tabs = Qt::TabWidget();
#$window->resize(250, 150);
	$window->setWindowTitle("Weather");
	$tabs->addTab($conditions, "Current Conditions");
	$tabs->addTab($forecast, "Forecast");
	$tabs->addTab($radar, "Radar");
	$layout->addWidget($tabs, 0, 0);


	my $hbox = Qt::HBoxLayout();

	my $button = Qt::PushButton( 'Update', $_ );
	$hbox->addWidget($button);
	this->connect($button, SIGNAL 'clicked()', this, SLOT 'update()');

	$button = Qt::PushButton( 'Exit', $_ );
	$hbox->addWidget($button);
	this->connect($button, SIGNAL 'clicked()', this, SLOT 'button_exit()');

	$layout->addLayout($hbox, 1, 0);

	$window->setLayout($layout);

	$window->show();

	Qt::Timer::singleShot(1, this, SLOT 'update()');
	my $id = this->startTimer($config{update_time});
	print "Update ID: $id\n";
	this->{update_id} = $id;

	$conditions->set_window($window);

	this->exec();
    }

    sub button_exit {
	exit(0);
    }

    sub timerEvent {
	my ($event) = @_;
	if (this->{update_id} != $event->timerId()) {
	    #print STDERR "Unknown timerEvent at " . time() . " (" . $event->timerId() . " != " . this->{update_id} . ").\n";
	    return;
	}
	print STDERR "Starting update from timerEvent at " . time() . " (" . $event->timerId() . ").\n";
	update();
    }

    sub update {
	$conditions->update();
	$forecast->update();
	$radar->update();
    }

}


{
    package main;
    use App;

    my $app = App(@ARGV);
}
